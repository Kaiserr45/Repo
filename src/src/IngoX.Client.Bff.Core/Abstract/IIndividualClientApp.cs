using IngoX.Client.Bff.Core.Models.External;
using Refit;

namespace IngoX.Client.Bff.Core.Abstract
{
    // <auto-generated>
    //     This code was generated by Refitter.
    // </auto-generated>

#nullable enable annotations

    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.5.5.0")]
    public partial interface IIndividualClientApp
    {

        /// <summary>Create new person.</summary>
        /// <param name="body">Запрос на создание.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: text/plain, application/json, text/json", "Content-Type: application/json")]
        [Post("/clients")]
        Task<string> ClientsPOST([Body] ViewPersonItemVm body);

        /// <summary>Update person.</summary>
        /// <param name="body">Запрос на обновление.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: text/plain, application/json, text/json", "Content-Type: application/json")]
        [Put("/clients")]
        Task<string> ClientsPUT([Body] ViewPersonItemVm body);

        /// <summary>Search person.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Search/clients")]
        Task<ICollection<SearchPersonItem>> ClientsAll([Query] string name, [Query] string passportNumber, [Query] string passportSeries, [Query] string birthDate, [Query] string phoneNumber, [Query] bool? withoutObjectsAmount);

        /// <summary>Search person advanced.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Search/clients/advanced")]
        Task<ICollection<AdvancedSearchPersonItem>> Advanced([Query] string isn, [Query] string lastName, [Query] string firstName, [Query] string fullName, [Query] string phoneNumber, [Query] string birthDate, [Query] string documentClassIsn, [Query] string documentSeries, [Query] string documentNumber, [Query] bool? withoutObjectsAmount);

        /// <summary>Get client data.</summary>
        /// <param name="id">Идентификатор клиента.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/clients/{id}")]
        Task<ViewPersonItem> ClientsGET(string id);
    }
}